{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","type","placeholder","onChange","src","alt","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAYeA,MAVf,WAEE,OACE,iCACE,mBAAGC,GAAG,QAAN,+B,0CCwDSC,E,kDA3Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,qDAWd,WAAqB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IAAOE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAAEV,YAAaQ,S,0BAGrC,SAAaG,GACX,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACbC,KAAKL,SAAL,eAAiBG,EAAOC,M,0BAE1B,SAAaH,GACXA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAC3CF,KAAKL,SAAS,CAAEX,UAAWuB,EAAYC,Q,oBAEzC,WACE,OACE,sBAAKC,UAAU,iBAAf,UACE,uBAAMA,UAAU,YAAYC,SAAUV,KAAKZ,aAA3C,UACE,uBACEuB,KAAK,OACLb,KAAK,UACLc,YAAY,WACZb,MAAOC,KAAKnB,MAAMC,QAClB+B,SAAUb,KAAKd,eAEjB,uBACEyB,KAAK,OACLb,KAAK,aACLc,YAAY,cACZb,MAAOC,KAAKnB,MAAME,WAClB8B,SAAUb,KAAKd,eAEjB,4CAEF,sBAAKuB,UAAU,OAAf,UACE,qBAAK9B,GAAG,aAAamC,IAAKd,KAAKnB,MAAMG,UAAW+B,IAAI,KACpD,oBAAIN,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GArDjBiC,aCUbC,MARf,WACE,OACE,sBAAKtC,GAAG,aAAR,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKjD,GAAG,WAEVkD,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d29f5a54.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Header () {\n\n  return (\n    <header>\n      <p id=\"title\">Meme generator</p>\n    </header>\n  )\n\n}\n\nexport default Header;\n","import React, {Component} from \"react\"\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super()\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: []\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(response => response.json())\n      .then(response => {\n          const {memes} = response.data\n          this.setState({ allMemeImgs: memes })\n      })\n  }\n  handleChange(event) {\n    const {name, value} = event.target\n    this.setState({ [name]: value })\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randMemeImg = this.state.allMemeImgs[randNum];\n    this.setState({ randomImg: randMemeImg.url });\n  }\n  render() {\n    return (\n      <div className=\"meme_generator\">\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n          <input \n            type=\"text\"\n            name=\"topText\"\n            placeholder=\"Top Text\"\n            value={this.state.topText}\n            onChange={this.handleChange}\n          /> \n          <input \n            type=\"text\"\n            name=\"bottomText\"\n            placeholder=\"Bottom Text\"\n            value={this.state.bottomText}\n            onChange={this.handleChange}\n          /> \n          <button>Gen</button>\n        </form>\n        <div className=\"meme\">\n          <img id=\"meme_image\" src={this.state.randomImg} alt=\"\" />\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default MemeGenerator\n","import React from 'react';\nimport Header from './Header';\nimport MemeGenerator from './MemeGenerator';\n\nfunction App() {\n  return (\n    <div id=\"App-header\">\n      <Header/>\n      <MemeGenerator/>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App id=\"body\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}